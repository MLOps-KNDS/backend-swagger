components:
  schemas:
    Gate:
      properties:
        created_at:
          description: Creation date
          format: date-time
          title: Created At
          type: string
        created_by:
          description: User ID of the creator
          title: Created By
          type: integer
        description:
          description: Gate surname
          title: Description
          type: string
        id:
          description: Gate ID
          title: Id
          type: integer
        name:
          description: Gate name
          title: Name
          type: string
        updated_at:
          description: Last update date
          format: date-time
          title: Updated At
          type: string
        updated_by:
          description: User ID of the last updater
          title: Updated By
          type: integer
      required:
      - name
      - description
      - id
      - created_by
      - created_at
      - updated_by
      - updated_at
      title: Gate
      type: object
    GatePatch:
      properties:
        description:
          description: Gate surname
          title: Description
          type: string
        name:
          description: Gate name
          title: Name
          type: string
        updated_by:
          description: User ID of the last updater
          title: Updated By
          type: integer
      required:
      - updated_by
      title: GatePatch
      type: object
    GatePut:
      properties:
        created_by:
          description: User ID of the creator
          title: Created By
          type: integer
        description:
          description: Gate surname
          title: Description
          type: string
        name:
          description: Gate name
          title: Name
          type: string
      required:
      - name
      - description
      - created_by
      title: GatePut
      type: object
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          title: Detail
          type: array
      title: HTTPValidationError
      type: object
    Model:
      properties:
        created_at:
          description: Creation date
          format: date-time
          title: Created At
          type: string
        created_by:
          description: User ID of the creator
          title: Created By
          type: integer
        description:
          description: Model description
          title: Description
          type: string
        id:
          description: Model ID
          title: Id
          type: integer
        name:
          description: Model name
          title: Name
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/ModelStatus'
          description: Model status
        updated_at:
          description: Last update date
          format: date-time
          title: Updated At
          type: string
        updated_by:
          description: User ID of the last updater
          title: Updated By
          type: integer
      required:
      - name
      - description
      - id
      - created_by
      - created_at
      - updated_by
      - updated_at
      - status
      title: Model
      type: object
    ModelDetails:
      properties:
        artifact_uri:
          description: Path to the model artifact
          title: Artifact Uri
          type: string
        cpu_limit:
          description: CPU limit
          title: Cpu Limit
          type: string
        cpu_request:
          description: CPU request
          title: Cpu Request
          type: string
        id:
          description: ModelDetails ID
          title: Id
          type: integer
        image_tag:
          description: Docker image tag
          title: Image Tag
          type: string
        memory_limit:
          description: Memory limit
          title: Memory Limit
          type: string
        memory_request:
          description: Memory request
          title: Memory Request
          type: string
        model_id:
          description: Model ID
          title: Model Id
          type: integer
        replicas:
          description: Number of replicas
          title: Replicas
          type: integer
      required:
      - id
      - model_id
      title: ModelDetails
      type: object
    ModelDetailsPatch:
      properties:
        artifact_uri:
          description: Path to the model artifact
          title: Artifact Uri
          type: string
        cpu_limit:
          description: CPU limit
          title: Cpu Limit
          type: string
        cpu_request:
          description: CPU request
          title: Cpu Request
          type: string
        image_tag:
          description: Docker image tag
          title: Image Tag
          type: string
        memory_limit:
          description: Memory limit
          title: Memory Limit
          type: string
        memory_request:
          description: Memory request
          title: Memory Request
          type: string
        replicas:
          description: Number of replicas
          title: Replicas
          type: integer
      title: ModelDetailsPatch
      type: object
    ModelPatch:
      properties:
        description:
          description: Model description
          title: Description
          type: string
        name:
          description: Model name
          title: Name
          type: string
        updated_by:
          description: User ID of the last updater
          title: Updated By
          type: integer
      required:
      - updated_by
      title: ModelPatch
      type: object
    ModelPut:
      properties:
        created_by:
          description: User ID of the creator
          title: Created By
          type: integer
        description:
          description: Model description
          title: Description
          type: string
        name:
          description: Model name
          title: Name
          type: string
      required:
      - name
      - description
      - created_by
      title: ModelPut
      type: object
    ModelStatus:
      description: An enumeration.
      enum:
      - active
      - inactive
      title: ModelStatus
      type: string
    Pool:
      properties:
        created_at:
          description: Creation date
          format: date-time
          title: Created At
          type: string
        created_by:
          description: User ID of the creator
          title: Created By
          type: integer
        description:
          description: Pool description
          title: Description
          type: string
        id:
          description: User ID
          title: Id
          type: integer
        name:
          description: Pool name
          title: Name
          type: string
        updated_at:
          description: Last update date
          format: date-time
          title: Updated At
          type: string
        updated_by:
          description: User ID of the last updater
          title: Updated By
          type: integer
      required:
      - name
      - description
      - id
      - created_by
      - created_at
      - updated_by
      - updated_at
      title: Pool
      type: object
    PoolModel:
      properties:
        mode:
          allOf:
          - $ref: '#/components/schemas/PoolModelMode'
          description: Model mode
        model_id:
          description: Model ID
          title: Model Id
          type: integer
        pool_id:
          description: Pool ID
          title: Pool Id
          type: integer
        weight:
          description: Model weight
          title: Weight
          type: integer
      required:
      - mode
      - weight
      - pool_id
      - model_id
      title: PoolModel
      type: object
    PoolModelDetailed:
      properties:
        description:
          description: Model description
          title: Description
          type: string
        mode:
          allOf:
          - $ref: '#/components/schemas/PoolModelMode'
          description: Model mode
        model_id:
          description: Model ID
          title: Model Id
          type: integer
        name:
          description: Model name
          title: Name
          type: string
        pool_id:
          description: Pool ID
          title: Pool Id
          type: integer
        weight:
          description: Model weight
          title: Weight
          type: integer
      required:
      - mode
      - weight
      - pool_id
      - model_id
      - name
      - description
      title: PoolModelDetailed
      type: object
    PoolModelMode:
      description: An enumeration.
      enum:
      - production
      - staging
      title: PoolModelMode
    PoolPatch:
      properties:
        description:
          description: Pool description
          title: Description
          type: string
        name:
          description: Pool name
          title: Name
          type: string
        updated_by:
          description: User ID of the last updater
          title: Updated By
          type: integer
      required:
      - name
      - description
      - updated_by
      title: PoolPatch
      type: object
    PoolPatchModel:
      properties:
        mode:
          allOf:
          - $ref: '#/components/schemas/PoolModelMode'
          description: Model mode
        weight:
          description: Model weight
          title: Weight
          type: integer
      title: PoolPatchModel
      type: object
    PoolPut:
      properties:
        created_by:
          description: User ID of the creator
          title: Created By
          type: integer
        description:
          description: Pool description
          title: Description
          type: string
        name:
          description: Pool name
          title: Name
          type: string
      required:
      - name
      - description
      - created_by
      title: PoolPut
      type: object
    PoolPutModel:
      properties:
        mode:
          allOf:
          - $ref: '#/components/schemas/PoolModelMode'
          description: Model mode
        weight:
          description: Model weight
          title: Weight
          type: integer
      required:
      - mode
      - weight
      title: PoolPutModel
      type: object
    Test:
      properties:
        created_at:
          description: Creation date
          format: date-time
          title: Created At
          type: string
        created_by:
          description: User ID of the creator
          title: Created By
          type: integer
        description:
          description: Test description
          title: Description
          type: string
        id:
          description: Test ID
          title: Id
          type: integer
        name:
          description: Test name
          title: Name
          type: string
        updated_at:
          description: Last update date
          format: date-time
          title: Updated At
          type: string
        updated_by:
          description: User ID of the last updater
          title: Updated By
          type: integer
      required:
      - name
      - description
      - id
      - created_by
      - created_at
      - updated_by
      - updated_at
      title: Test
      type: object
    TestPatch:
      properties:
        description:
          description: Test description
          title: Description
          type: string
        name:
          description: Test name
          title: Name
          type: string
        updated_by:
          description: User ID of the last updater
          title: Updated By
          type: integer
      required:
      - updated_by
      title: TestPatch
      type: object
    TestPut:
      properties:
        created_by:
          description: User ID of the creator
          title: Created By
          type: integer
        description:
          description: Test description
          title: Description
          type: string
        name:
          description: Test name
          title: Name
          type: string
      required:
      - name
      - description
      - created_by
      title: TestPut
      type: object
    User:
      properties:
        email:
          description: User email
          format: email
          title: Email
          type: string
        id:
          description: User ID
          title: Id
          type: integer
        name:
          description: User name
          title: Name
          type: string
        surname:
          description: User surname
          title: Surname
          type: string
      required:
      - name
      - surname
      - email
      - id
      title: User
      type: object
    UserPatch:
      properties:
        email:
          format: email
          title: Email
          type: string
        name:
          title: Name
          type: string
        surname:
          title: Surname
          type: string
      title: UserPatch
      type: object
    UserPut:
      properties:
        email:
          description: User email
          format: email
          title: Email
          type: string
        name:
          description: User name
          title: Name
          type: string
        surname:
          description: User surname
          title: Surname
          type: string
      required:
      - name
      - surname
      - email
      title: UserPut
      type: object
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          title: Location
          type: array
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
      required:
      - loc
      - msg
      - type
      title: ValidationError
      type: object
info:
  description: Backend Service for the ML Platform
  title: Backend Service
  version: 0.1.0
openapi: 3.0.2
paths:
  /:
    get:
      description: 'Root endpoint. Returns a simple message for testing purposes.

        :return: A "Hello World" message.'
      operationId: root__get
      responses:
        '200':
          content:
            application/json:
              schema:
                title: Response Root  Get
                type: object
          description: Successful Response
      summary: Root
  /gate/:
    get:
      description: 'Retrieves a list of gates with pagination options (skip, limit).


        :param db: Database session

        :param skip: (optional) the number of records to skip (default: 0)

        :param limit: (optional) the maximum number of records to retrieve (default:
        100)


        :raise HTTPException: 404 status code with "Gates not found!" message

        if the specified range of gate ID''s does not exist in the database.


        :return: a list of gate data, where skip < gate_id < limit'
      operationId: get_gates_gate__get
      parameters:
      - in: query
        name: skip
        required: false
        schema:
          default: 0
          minimum: 0.0
          title: Skip
          type: integer
      - in: query
        name: limit
        required: false
        schema:
          default: 100
          minimum: 0.0
          title: Limit
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Gate'
                title: Response Get Gates Gate  Get
                type: array
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Gates
      tags:
      - gate
    put:
      description: 'Creates a new gate with the given information and returns the
        gate information.


        :param gate_data: the information of the new gate to be created.

        :param db: Database session


        :raise HTTPException: 409 status code with "Name already registered"

        message if the provided name for gate already exists in the database


        :return: the newly-inserted gate record'
      operationId: put_gate_gate__put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GatePut'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gate'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Put Gate
      tags:
      - gate
  /gate/{gate_id}:
    delete:
      description: 'Deletes the gate with the specified email.


        :param id: The id of the gate to be deleted.

        :param db: Database session


        :raise HTTPException: 404 status code with "Gate not found!" message

        if the specified gate ID does not exist in the database.


        :return: the updated gate record'
      operationId: delete_gate_gate__gate_id__delete
      parameters:
      - in: path
        name: gate_id
        required: true
        schema:
          title: Gate Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Delete Gate
      tags:
      - gate
    get:
      description: 'Retrieves the information of a specific gate by ID.


        :param gate_id: the gate ID to retrieve

        :param db: Database session


        :raise HTTPException: 404 status code with "Gate not found!" message

        if the specified gate ID does not exist in the database.


        :return: the gate data corresponding to the given ID'
      operationId: get_gate_gate__gate_id__get
      parameters:
      - in: path
        name: gate_id
        required: true
        schema:
          title: Gate Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gate'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Gate
      tags:
      - gate
    patch:
      description: 'Updates the information of an existing gate with the provided
        data and

        returns the updated gate information.


        :param gate_id: the gate ID to patch

        :param gate_data: the information of the new gate to be created.

        :param db: Database session


        :raise HTTPException: 404 status code with "Gate not found!" message

        if the specified gate ID does not exist in the database.

        :raise HTTPException: 409 status code with "Name already registered"

        message if the provided name for gate already exists in the database


        :return: the updated gate record'
      operationId: patch_gate_gate__gate_id__patch
      parameters:
      - in: path
        name: gate_id
        required: true
        schema:
          title: Gate Id
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GatePatch'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gate'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Patch Gate
      tags:
      - gate
  /gate/{gate_id}/pool:
    get:
      description: 'Retrieves a list of gates with pagination options (skip, limit).


        :param gate_id: the gate ID to retrieve

        :param db: Database session

        :param skip: (optional) the number of records to skip (default: 0)

        :param limit: (optional) the maximum number of records to retrieve (default:
        100)


        :raise HTTPException: 404 status code with "Pools not found!" message

        if gate has no pools.


        :return: a list of gate pools data, where skip < number of pools < limit'
      operationId: get_pools_gate__gate_id__pool_get
      parameters:
      - in: path
        name: gate_id
        required: true
        schema:
          title: Gate Id
          type: integer
      - in: query
        name: skip
        required: false
        schema:
          default: 0
          minimum: 0.0
          title: Skip
          type: integer
      - in: query
        name: limit
        required: false
        schema:
          default: 100
          minimum: 0.0
          title: Limit
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Pool'
                title: Response Get Pools Gate  Gate Id  Pool Get
                type: array
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Pools
      tags:
      - gate
  /gate/{gate_id}/pool/{pool_id}:
    delete:
      description: 'Deletes pool from gate.


        :param gate_id: The id of the gate from which to delet.

        :param pool_id: The id of the pool to be deleted.

        :param db: Database session


        :raise HTTPException: 404 status code with "Gate not found!" message

        if the specified gate ID does not exist in the database.

        :raise HTTPException: 404 status code with "Pool not found!" message

        if the specified pool ID does not exist in the database.


        :return: JSON response with status code 200'
      operationId: delete_pool_gate_gate__gate_id__pool__pool_id__delete
      parameters:
      - in: path
        name: gate_id
        required: true
        schema:
          title: Gate Id
          type: integer
      - in: path
        name: pool_id
        required: true
        schema:
          title: Pool Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Delete Pool Gate
      tags:
      - gate
    put:
      description: 'Adds existing pool to gate.


        :param gate_id: the gate ID to retrieve

        :param pool_id: the pool ID to retrieve

        :param db: Database session


        :raise HTTPException: 404 status code with "Gate not found!" message

        if the specified gate ID does not exist in the database.

        :raise HTTPException: 404 status code with "Pool not found!" message

        if the specified pool ID does not exist in the database.

        :raise HTTPException: 409 status code with "Pool already in gate!"

        message if the specified pool ID already in gate.


        :return: JSON response with status code 201'
      operationId: put_pool_gate_gate__gate_id__pool__pool_id__put
      parameters:
      - in: path
        name: gate_id
        required: true
        schema:
          title: Gate Id
          type: integer
      - in: path
        name: pool_id
        required: true
        schema:
          title: Pool Id
          type: integer
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Put Pool Gate
      tags:
      - gate
  /model/:
    get:
      description: 'Retrieves a list of models with pagination options (skip, limit).


        :param db: Database session

        :param skip: (optional) the number of records to skip (default: 0)

        :param limit: (optional) the maximum number of records to retrieve (default:
        100)


        :raise HTTPException: 404 status code with "Model not found!" message

        if the specified range of model ID''s does not exist in the database.


        :return: a list of model data, where skip < model_id < limit'
      operationId: get_models_model__get
      parameters:
      - in: query
        name: skip
        required: false
        schema:
          default: 0
          minimum: 0.0
          title: Skip
          type: integer
      - in: query
        name: limit
        required: false
        schema:
          default: 100
          minimum: 0.0
          title: Limit
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Model'
                title: Response Get Models Model  Get
                type: array
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Models
      tags:
      - model
    put:
      description: 'Creates a new model with the given information and returns the
        model information.


        :param model_data: the information of the new model to be created.

        :param db: Database session


        :raise HTTPException: 409 status code with "Name already registered"

        message if the provided name already exists in the database.


        :return: the newly-inserted model record'
      operationId: put_model_model__put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelPut'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Put Model
      tags:
      - model
  /model/{model_id}:
    delete:
      description: 'Deletes the model with the given ID.


        :param model_id: model ID

        :param db: Database session


        :raise HTTPException: 404 status code with "Model not found!" message

        if the specified gate ID does not exist in the database.


        :return: a json with a "detail" key indicating success'
      operationId: delete_model_model__model_id__delete
      parameters:
      - in: path
        name: model_id
        required: true
        schema:
          title: Model Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Delete Model
      tags:
      - model
    get:
      description: 'Retrieves the information of a specific model by ID.


        :param model_id: model ID

        :param db: Database session


        :raise HTTPException: 404 status code with "Model not found!" message

        if the specified gate ID does not exist in the database.


        :return: the model data corresponding to the given ID'
      operationId: get_model_model__model_id__get
      parameters:
      - in: path
        name: model_id
        required: true
        schema:
          title: Model Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Model
      tags:
      - model
    patch:
      description: 'Allows updating a model by it''s id


        :param model_id: id of model to update

        :param model_data: JSON fields with new values to update a model

        model is not found


        :raise HTTPException: 404 status code with "Model not found!" message

        if the specified gate ID does not exist in the database.

        :raise HTTPException: 409 status code with "Name already registered"

        message if the provided name already exists in the database.


        :return: updated model'
      operationId: patch_model_model__model_id__patch
      parameters:
      - in: path
        name: model_id
        required: true
        schema:
          title: Model Id
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelPatch'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Patch Model
      tags:
      - model
  /model/{model_id}/activate:
    post:
      description: 'Activates the model with the given ID.


        :param model_id: model ID

        :param db: Database session


        :raise HTTPException: 404 status code with "Model not found!"

        :raise HTTPException: 409 status code with "Model already active!"

        :raise HTTPException: 404 status code with "Model details not found!"

        :raise HTTPException: 406 status code with "Model details are not complete!"


        :return: a json with a "detail" key indicating success'
      operationId: activate_model_model__model_id__activate_post
      parameters:
      - in: path
        name: model_id
        required: true
        schema:
          title: Model Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Activate Model
      tags:
      - model
  /model/{model_id}/build:
    post:
      description: 'Builds container of the model with the given ID.


        :param model_id: model ID

        :param db: Database session


        :raise HTTPException: 404 status code with "Model not found!"

        :raise HTTPException: 404 status code with "Model details not found!"

        :raise HTTPException: 406 status code with "Model details are not complete!"


        :return: a json with a "detail" key indicating success'
      operationId: build_model_model__model_id__build_post
      parameters:
      - in: path
        name: model_id
        required: true
        schema:
          title: Model Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Build Model
      tags:
      - model
  /model/{model_id}/deactivate:
    post:
      description: 'Deactivates the model with the given ID.


        :param model_id: model ID

        :param db: Database session


        :raise HTTPException: 404 status code with "Model not found!" message

        :raise HTTPException: 409 status code with "Model already inactive!" message


        :return: a json with a "detail" key indicating success'
      operationId: deactivate_model_model__model_id__deactivate_post
      parameters:
      - in: path
        name: model_id
        required: true
        schema:
          title: Model Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Deactivate Model
      tags:
      - model
  /model/{model_id}/details/:
    get:
      description: 'Retrieves the information of a specific model_details by ID.


        :param model_id: model ID

        :param db: Database session


        :raise HTTPException: 404 status code with "ModelDetails not found!" message

        if the specified gate ID does not exist in the database.


        :return: the model_details data corresponding to the given ID'
      operationId: get_model_details_by_id_model__model_id__details__get
      parameters:
      - in: path
        name: model_id
        required: true
        schema:
          title: Model Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelDetails'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Model Details By Id
      tags:
      - model
      - model-details
    patch:
      description: 'Updates the information of an existing model_details

        and returns the model_details information.


        :param model_id: model ID

        :param model_details_data: the information of the model_details to be updated.

        :param db: Database session


        :raise HTTPException: 404 status code with "ModelDetails not found!" message

        if the specified model_details does not exist in the database.


        :return: the model_details data corresponding to the given ID'
      operationId: patch_model_details_model__model_id__details__patch
      parameters:
      - in: path
        name: model_id
        required: true
        schema:
          title: Model Id
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelDetailsPatch'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelDetails'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Patch Model Details
      tags:
      - model
      - model-details
  /pool/:
    get:
      description: 'Retrieves a list of pools with pagination options (skip, limit).


        :param db: Database session

        :param skip: (optional) the number of records to skip (default: 0)

        :param limit: (optional) the maximum number of records to retrieve (default:
        100)


        :raise HTTPException: 404 status code with "Model not found!" message

        if the specified range of pool ID''s does not exist in the database.


        :return: a list of pool data, where skip < pool_id < limit'
      operationId: get_pools_pool__get
      parameters:
      - in: query
        name: skip
        required: false
        schema:
          default: 0
          minimum: 0.0
          title: Skip
          type: integer
      - in: query
        name: limit
        required: false
        schema:
          default: 100
          minimum: 0.0
          title: Limit
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Pool'
                title: Response Get Pools Pool  Get
                type: array
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Pools
      tags:
      - pool
    put:
      description: 'Creates a new pool with the given information and returns the
        pool information.


        :param pool_data: the information of the new pool to be created.

        :param db: Database session


        :return: the newly-inserted pool record'
      operationId: put_pool_pool__put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PoolPut'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pool'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Put Pool
      tags:
      - pool
  /pool/{pool_id}:
    delete:
      description: 'Deletes the pool with the given ID.


        :param pool_id: pool ID

        :param db: Database session


        :raise HTTPException: 404 status code with "Pool not found!" message

        if the specified pool ID does not exist in the database.


        :return: a json with a "detail" key indicating success'
      operationId: delete_pool_pool__pool_id__delete
      parameters:
      - in: path
        name: pool_id
        required: true
        schema:
          title: Pool Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Delete Pool
      tags:
      - pool
    get:
      description: 'Retrieves the information of a specific pool by ID.


        :param pool_id: pool ID

        :param db: Database session


        :raise HTTPException: 404 status code with "Pool not found!" message

        if the specified pool ID does not exist in the database.


        :return: the pool data corresponding to the given ID'
      operationId: get_pool_pool__pool_id__get
      parameters:
      - in: path
        name: pool_id
        required: true
        schema:
          title: Pool Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pool'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Pool
      tags:
      - pool
    patch:
      description: 'Updates the information of an existing pool with the provided
        data and

        returns the updated pool information.


        :param pool_data: the information of the new pool to be created.

        :param db: Database session


        :raise HTTPException: 404 status code with "Pool not found!" message

        if the specified pool ID does not exist in the database.

        :raise HTTPException: 409 status code with "Name already registered"

        message if the provided name already exists in the database.


        :return: the updated pool record'
      operationId: patch_pool_pool__pool_id__patch
      parameters:
      - in: path
        name: pool_id
        required: true
        schema:
          title: Pool Id
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PoolPatch'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pool'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Patch Pool
      tags:
      - pool
  /pool/{pool_id}/model:
    get:
      description: 'Retrieves a list of models in a pool.


        :param db: Database session

        :param pool_id: the pool ID to retrieve models from


        :raise HTTPException: 404 status code with "Pool not found!" message

        if the specified pool ID does not exist in the database.


        :return: a list of models in the pool'
      operationId: get_pool_models_pool__pool_id__model_get
      parameters:
      - in: path
        name: pool_id
        required: true
        schema:
          title: Pool Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PoolModelDetailed'
                title: Response Get Pool Models Pool  Pool Id  Model Get
                type: array
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Pool Models
      tags:
      - pool-model
  /pool/{pool_id}/model/{model_id}:
    delete:
      description: 'Deletes the pool with the given ID.


        :param pool_id: the pool ID to retrieve models from

        :param model_id: the model ID to retrieve from the pool

        :param pool_model_data: the information of the model in the pool to be deleted.

        :param db: Database session


        :raise HTTPException: 404 status code with "Pool not found!" message

        if the specified pool ID does not exist in the database.

        :raise HTTPException: 404 status code with "Model not found!" message

        if the specified pool ID does not exist in the database.

        :raise HTTPException: 404 status code with "Model not found!" message

        if the specified pool ID does not exist in the database.


        :return: a json with a "detail" key indicating success'
      operationId: delete_pool_model_pool__pool_id__model__model_id__delete
      parameters:
      - in: path
        name: pool_id
        required: true
        schema:
          title: Pool Id
          type: integer
      - in: path
        name: model_id
        required: true
        schema:
          title: Model Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Delete Pool Model
      tags:
      - pool-model
    patch:
      description: 'Updates the information of an existing pool with the provided
        data and

        returns the updated pool information.


        :param pool_id: the pool ID to retrieve models from

        :param model_id: the model ID to retrieve from the pool

        :param pool_model_data: the information of the model in the pool to be patched.

        :param db: Database session


        :raise HTTPException: 404 status code with "Model not found in the pool!"
        message

        if the specified model ID does not exist in the pool database.

        :raise HTTPException: 404 status code with "Pool not found!" message

        if the specified pool ID does not exist in the database.

        :raise HTTPException: 404 status code with "Model not found!" message

        if the specified pool ID does not exist in the database.


        :return: the updated pool record'
      operationId: patch_pool_model_pool__pool_id__model__model_id__patch
      parameters:
      - in: path
        name: pool_id
        required: true
        schema:
          title: Pool Id
          type: integer
      - in: path
        name: model_id
        required: true
        schema:
          title: Model Id
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PoolPatchModel'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoolModel'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Patch Pool Model
      tags:
      - pool-model
    put:
      description: 'Inserts a model into a given pool.


        :param pool_id: the pool ID to retrieve models from

        :param model_id: the model ID to retrieve from the pool

        :param pool_model_data: the information about the pool and model.

        :param db: Database session


        :raise HTTPException: 404 status code with "Pool not found!" message

        if the specified pool ID does not exist in the database.

        :raise HTTPException: 404 status code with "Model not found!" message

        if the specified model ID does not exist in the database.

        :raise HTTPException: 404 status code with "Model not found!" message

        if the specified pool ID does not exist in the database.


        :return: the newly-inserted pool record'
      operationId: put_pool_model_pool__pool_id__model__model_id__put
      parameters:
      - in: path
        name: pool_id
        required: true
        schema:
          title: Pool Id
          type: integer
      - in: path
        name: model_id
        required: true
        schema:
          title: Model Id
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PoolPutModel'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoolModel'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Put Pool Model
      tags:
      - pool-model
  /test/:
    get:
      description: 'Retrieves a list of tests with pagination options (skip, limit).


        :param db: Database session

        :param skip: (optional) the number of records to skip (default: 0)

        :param limit: (optional) the maximum number of records to retrieve (default:
        100)


        :raise HTTPException: 404 status code with "Test not found!" message

        if the specified range of test ID''s does not exist in the database.


        :return: a list of user data, where skip < test_id < limit'
      operationId: get_tests_test__get
      parameters:
      - in: query
        name: skip
        required: false
        schema:
          default: 0
          minimum: 0.0
          title: Skip
          type: integer
      - in: query
        name: limit
        required: false
        schema:
          default: 100
          minimum: 0.0
          title: Limit
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Test'
                title: Response Get Tests Test  Get
                type: array
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Tests
      tags:
      - test
    put:
      description: 'Creates a new test with the given information and returns the
        test information.


        :param test_data: the information of the new test to be created.

        :param db: Database session


        :raise HTTPException: 409 status code with "Name already registered"

        message if the provided name already exists in the database.


        :return: the newly-inserted test record'
      operationId: put_test_test__put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestPut'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Test'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Put Test
      tags:
      - test
  /test/{test_id}:
    delete:
      description: 'Deletes a test with the given ID and returns the test information.


        :param test_id: test ID

        :param db: Database session


        :raise HTTPException: 404 status code with "Test not found!" message

        if the specified test ID does not exist in the database.


        :return: the deleted test record'
      operationId: delete_test_test__test_id__delete
      parameters:
      - in: path
        name: test_id
        required: true
        schema:
          title: Test Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Delete Test
      tags:
      - test
    get:
      description: 'Retrieves the information of a specific test by ID.


        :param test_id: test ID

        :param db: Database session


        :raise HTTPException: 404 status code with "Test not found!" message

        if the specified test ID does not exist in the database.


        :return: the test data corresponding to the given ID'
      operationId: get_test_test__test_id__get
      parameters:
      - in: path
        name: test_id
        required: true
        schema:
          title: Test Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Test'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Test
      tags:
      - test
    patch:
      description: 'Updates a test with the given information and returns the test
        information.


        :param test_id: test ID

        :param test_data: the information of the test to be updated.

        :param db: Database session


        :raise HTTPException: 404 status code with "Test not found!" message

        if the specified test ID does not exist in the database.

        :raise HTTPException: 409 status code with "Name already registered"

        message if the provided name already exists in the database.


        :return: the updated test record'
      operationId: patch_test_test__test_id__patch
      parameters:
      - in: path
        name: test_id
        required: true
        schema:
          title: Test Id
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestPatch'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Test'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Patch Test
      tags:
      - test
  /user/:
    get:
      description: 'Retrieves a list of users with pagination options (skip, limit).


        :param db: Database session

        :param skip: (optional) the number of records to skip (default: 0)

        :param limit: (optional) the maximum number of records to retrieve (default:
        100)


        :raise HTTPException: 404 status code with "User not found!" message

        if the specified range of user ID''s does not exist in the database.


        :return: a list of user data, where skip < user_id < limit'
      operationId: get_users_user__get
      parameters:
      - in: query
        name: skip
        required: false
        schema:
          default: 0
          minimum: 0.0
          title: Skip
          type: integer
      - in: query
        name: limit
        required: false
        schema:
          default: 100
          minimum: 0.0
          title: Limit
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                title: Response Get Users User  Get
                type: array
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Users
      tags:
      - user
    put:
      description: 'Creates a new user with the given information and returns the
        user information.


        :param user_data: the information of the new user to be created.

        :param db: Database session


        :raise HTTPException: 409 status code with "Email already registered"

        message if the provided email already exists in the database.


        :return: the newly-inserted user record'
      operationId: put_user_user__put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPut'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Put User
      tags:
      - user
  /user/{user_id}:
    delete:
      description: 'Deletes the user with the specified email.


        :param id: The id of the user to be deleted.

        :param db: Database session


        :raise HTTPException: 404 status code with "User not found!" message

        if the specified user ID does not exist in the database.


        :return: the updated user record'
      operationId: delete_user_user__user_id__delete
      parameters:
      - in: path
        name: user_id
        required: true
        schema:
          title: User Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Delete User
      tags:
      - user
    get:
      description: 'Retrieves the information of a specific user by ID.


        :param user_data: the information of the new user to be created.

        :param db: Database session


        :raise HTTPException: 404 status code with "User not found!" message

        if the specified user ID does not exist in the database.


        :return: the user data corresponding to the given ID'
      operationId: get_user_user__user_id__get
      parameters:
      - in: path
        name: user_id
        required: true
        schema:
          title: User Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get User
      tags:
      - user
    patch:
      description: 'Updates the information of an existing user with the provided
        data and

        returns the updated user information.


        :param user_id: the user ID to patch

        :param user_data: the information of the new user to be created.

        :param db: Database session


        :raise HTTPException: 404 status code with "User not found!" message

        if the specified user ID does not exist in the database.

        :raise HTTPException: 409 status code with "Email already registered"

        message if the provided email already exists in the database.


        :return: the updated user record'
      operationId: patch_user_user__user_id__patch
      parameters:
      - in: path
        name: user_id
        required: true
        schema:
          title: User Id
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPatch'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Patch User
      tags:
      - user
